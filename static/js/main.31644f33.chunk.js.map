{"version":3,"sources":["Home.tsx","App.tsx","index.tsx","utils.ts","connection.tsx","candy-machine.ts"],"names":["Home","styled","WalletDialogButton","div","props","useState","setCandyMachine","open","message","severity","undefined","alertState","setAlertState","setIsActive","setEndDate","setItemsRemaining","setIsWhitelistUser","setIsPresale","setIsValidBalance","setDiscountPrice","setNeedTxnSplit","wallet","rpcHost","useWallet","anchorWallet","network","useMemo","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","connection","Connection","candyMachineId","getCandyMachineState","cndy","active","state","goLiveDate","toNumber","Date","getTime","presale","isWLUser","userPrice","price","whitelistMintSettings","discountPrice","isWhitelistOnly","mint","anchor","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","value","amount","console","log","tokenMint","valid","gte","getBalance","endSettings","endSettingType","date","toDate","number","limit","Math","min","itemsAvailable","itemsRedeemed","isSoldOut","itemsRemaining","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","isActive","isPresale","txnEstimate","retainAuthority","mode","burnEveryTime","gatekeeper","expireOnUse","Error","hideDuration","startsWith","useEffect","loop","setTimeout","Container","maxWidth","style","padding","Box","height","width","alt","src","className","marginTop","position","Grid","justifyContent","alignItems","container","item","xs","md","borderRadius","sx","textAlign","mt","pb","Link","href","Snackbar","autoHideDuration","onClose","Alert","theme","createTheme","palette","type","process","e","getCandyMachineId","App","clusterApiUrl","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","txTimeout","DEFAULT_TIMEOUT","ReactDOM","render","document","getElementById","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","gatekeeperNetwork","Buffer","from","getNetworkToken","SequenceType","sendTransactions","instructionSet","signersSet","sequenceType","Parallel","successCallback","txid","ind","failCallback","block","beforeTransactions","afterTransactions","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","length","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","partiallySignedTransactions","filter","t","signatures","find","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","StopOnFailure","Promise","all","txs","result","getUnixTs","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","err","error","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","queryStatus","status","confirmations","subId","resolve","reject","onSignature","context","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","CANDY_MACHINE_PROGRAM","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","createAccountsForMint","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","mintOneToken","setupState","userPayingAccountAddress","remainingAccounts","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","toBase58","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","mintTxn","mintTxId","metadataKey"],"mappings":"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","file":"static/js/main.31644f33.chunk.js","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Box, Container, Link, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n}\n\n/**\n * We had a hard time uploading all 3501 assets so we\n * decided to upload 500 instead. This offset should give\n * the impression that we have all 3501. We need to\n * upload a new batch after this batch gets minted fully.\n */\nconst remainingOffset = 3001;\n\n// @ts-ignore\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = 'confirmed') => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection,\n          );\n          let active =\n            cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint,\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                'There was a problem fetching whitelist token balance',\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log('There was a problem fetching SPL token balance');\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey),\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            let limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable,\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA,\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith('failed to get info about account')\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: 'error',\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: 'error',\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.rpcHost],\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              'processed',\n            );\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      let soldOut = false;\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          soldOut = true;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n      if (!soldOut) {\n        // The sold out alert is shown even when that is not the case\n        // so we should disable it for the time being\n        setAlertState({\n          open: true,\n          message,\n          severity: 'error',\n        });\n      }\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  // @ts-ignore\n  return (\n    <Container maxWidth=\"xl\" style={{ padding: 0 }}>\n      <Container maxWidth=\"xl\" style={{ padding: 0 }}>\n        <Box>\n          <img\n            height=\"100%\"\n            width=\"100%\"\n            alt=\"Kippo\"\n            src=\"/static/image/kippo-bg.png\"\n          />\n        </Box>\n      </Container>\n      <Container\n        className=\"mint-button-container\"\n        maxWidth=\"xl\"\n        style={{\n          marginTop: '-80%',\n        }}\n      >\n        <Container\n          maxWidth=\"xs\"\n          style={{\n            position: 'relative',\n          }}\n        >\n          {/*<Paper*/}\n          {/*  style={{*/}\n          {/*    padding: 24,*/}\n          {/*    paddingBottom: 10,*/}\n          {/*    backgroundColor: '#151A1F',*/}\n          {/*    borderRadius: 6,*/}\n          {/*  }}*/}\n          {/*>*/}\n          {/*  {!wallet.connected ? (*/}\n          {/*    <ConnectButton>Connect Wallet</ConnectButton>*/}\n          {/*  ) : (*/}\n          {/*    <>*/}\n          {/*      {candyMachine && (*/}\n          {/*        <Grid*/}\n          {/*          container*/}\n          {/*          direction=\"row\"*/}\n          {/*          justifyContent=\"center\"*/}\n          {/*          wrap=\"nowrap\"*/}\n          {/*        >*/}\n          {/*          <Grid item xs={3}>*/}\n          {/*            <Typography variant=\"body2\" color=\"textSecondary\">*/}\n          {/*              Remaining*/}\n          {/*            </Typography>*/}\n          {/*            <Typography*/}\n          {/*              variant=\"h6\"*/}\n          {/*              color=\"textPrimary\"*/}\n          {/*              style={{*/}\n          {/*                fontWeight: 'bold',*/}\n          {/*              }}*/}\n          {/*            >*/}\n          {/*              {`${itemsRemaining + remainingOffset}`}*/}\n          {/*            </Typography>*/}\n          {/*          </Grid>*/}\n          {/*          <Grid item xs={4}>*/}\n          {/*            <Typography variant=\"body2\" color=\"textSecondary\">*/}\n          {/*              {isWhitelistUser && discountPrice*/}\n          {/*                ? 'Discount Price'*/}\n          {/*                : 'Price'}*/}\n          {/*            </Typography>*/}\n          {/*            <Typography*/}\n          {/*              variant=\"h6\"*/}\n          {/*              color=\"textPrimary\"*/}\n          {/*              style={{ fontWeight: 'bold' }}*/}\n          {/*            >*/}\n          {/*              {isWhitelistUser && discountPrice*/}\n          {/*                ? `◎ ${formatNumber.asNumber(discountPrice)}`*/}\n          {/*                : `◎ ${formatNumber.asNumber(*/}\n          {/*                    candyMachine.state.price,*/}\n          {/*                  )}`}*/}\n          {/*            </Typography>*/}\n          {/*          </Grid>*/}\n          {/*          <Grid item xs={5}>*/}\n          {/*            {isActive && endDate && Date.now() < endDate.getTime() ? (*/}\n          {/*              <>*/}\n          {/*                <MintCountdown*/}\n          {/*                  key=\"endSettings\"*/}\n          {/*                  date={getCountdownDate(candyMachine)}*/}\n          {/*                  style={{ justifyContent: 'flex-end' }}*/}\n          {/*                  status=\"COMPLETED\"*/}\n          {/*                  onComplete={toggleMintButton}*/}\n          {/*                />*/}\n          {/*                <Typography*/}\n          {/*                  variant=\"caption\"*/}\n          {/*                  align=\"center\"*/}\n          {/*                  display=\"block\"*/}\n          {/*                  style={{ fontWeight: 'bold' }}*/}\n          {/*                >*/}\n          {/*                  TO END OF MINT*/}\n          {/*                </Typography>*/}\n          {/*              </>*/}\n          {/*            ) : (*/}\n          {/*              <>*/}\n          {/*                <MintCountdown*/}\n          {/*                  key=\"goLive\"*/}\n          {/*                  date={getCountdownDate(candyMachine)}*/}\n          {/*                  style={{ justifyContent: 'flex-end' }}*/}\n          {/*                  status={*/}\n          {/*                    candyMachine?.state?.isSoldOut ||*/}\n          {/*                    (endDate && Date.now() > endDate.getTime())*/}\n          {/*                      ? 'COMPLETED'*/}\n          {/*                      : isPresale*/}\n          {/*                      ? 'PRESALE'*/}\n          {/*                      : 'LIVE'*/}\n          {/*                  }*/}\n          {/*                  onComplete={toggleMintButton}*/}\n          {/*                />*/}\n          {/*                {isPresale &&*/}\n          {/*                  candyMachine.state.goLiveDate &&*/}\n          {/*                  candyMachine.state.goLiveDate.toNumber() >*/}\n          {/*                    new Date().getTime() / 1000 && (*/}\n          {/*                    <Typography*/}\n          {/*                      variant=\"caption\"*/}\n          {/*                      align=\"center\"*/}\n          {/*                      display=\"block\"*/}\n          {/*                      style={{ fontWeight: 'bold' }}*/}\n          {/*                    >*/}\n          {/*                      UNTIL PUBLIC MINT*/}\n          {/*                    </Typography>*/}\n          {/*                  )}*/}\n          {/*              </>*/}\n          {/*            )}*/}\n          {/*          </Grid>*/}\n          {/*        </Grid>*/}\n          {/*      )}*/}\n          {/*      <MintContainer>*/}\n          {/*        {candyMachine?.state.isActive &&*/}\n          {/*        candyMachine?.state.gatekeeper &&*/}\n          {/*        wallet.publicKey &&*/}\n          {/*        wallet.signTransaction ? (*/}\n          {/*          <GatewayProvider*/}\n          {/*            wallet={{*/}\n          {/*              publicKey:*/}\n          {/*                wallet.publicKey ||*/}\n          {/*                new PublicKey(CANDY_MACHINE_PROGRAM),*/}\n          {/*              //@ts-ignore*/}\n          {/*              signTransaction: wallet.signTransaction,*/}\n          {/*            }}*/}\n          {/*            gatekeeperNetwork={*/}\n          {/*              candyMachine?.state?.gatekeeper?.gatekeeperNetwork*/}\n          {/*            }*/}\n          {/*            clusterUrl={rpcUrl}*/}\n          {/*            cluster={cluster}*/}\n          {/*            handleTransaction={async (transaction: Transaction) => {*/}\n          {/*              setIsUserMinting(true);*/}\n          {/*              const userMustSign = transaction.signatures.find(sig =>*/}\n          {/*                sig.publicKey.equals(wallet.publicKey!),*/}\n          {/*              );*/}\n          {/*              if (userMustSign) {*/}\n          {/*                setAlertState({*/}\n          {/*                  open: true,*/}\n          {/*                  message: 'Please sign one-time Civic Pass issuance',*/}\n          {/*                  severity: 'info',*/}\n          {/*                });*/}\n          {/*                try {*/}\n          {/*                  transaction = await wallet.signTransaction!(*/}\n          {/*                    transaction,*/}\n          {/*                  );*/}\n          {/*                } catch (e) {*/}\n          {/*                  setAlertState({*/}\n          {/*                    open: true,*/}\n          {/*                    message: 'User cancelled signing',*/}\n          {/*                    severity: 'error',*/}\n          {/*                  });*/}\n          {/*                  // setTimeout(() => window.location.reload(), 2000);*/}\n          {/*                  setIsUserMinting(false);*/}\n          {/*                  throw e;*/}\n          {/*                }*/}\n          {/*              } else {*/}\n          {/*                setAlertState({*/}\n          {/*                  open: true,*/}\n          {/*                  message: 'Refreshing Civic Pass',*/}\n          {/*                  severity: 'info',*/}\n          {/*                });*/}\n          {/*              }*/}\n          {/*              try {*/}\n          {/*                await sendTransaction(*/}\n          {/*                  props.connection,*/}\n          {/*                  wallet,*/}\n          {/*                  transaction,*/}\n          {/*                  [],*/}\n          {/*                  true,*/}\n          {/*                  'confirmed',*/}\n          {/*                );*/}\n          {/*                setAlertState({*/}\n          {/*                  open: true,*/}\n          {/*                  message: 'Please sign minting',*/}\n          {/*                  severity: 'info',*/}\n          {/*                });*/}\n          {/*              } catch (e) {*/}\n          {/*                setAlertState({*/}\n          {/*                  open: true,*/}\n          {/*                  message:*/}\n          {/*                    'Solana dropped the transaction, please try again',*/}\n          {/*                  severity: 'warning',*/}\n          {/*                });*/}\n          {/*                console.error(e);*/}\n          {/*                // setTimeout(() => window.location.reload(), 2000);*/}\n          {/*                setIsUserMinting(false);*/}\n          {/*                throw e;*/}\n          {/*              }*/}\n          {/*              await onMint();*/}\n          {/*            }}*/}\n          {/*            broadcastTransaction={false}*/}\n          {/*            options={{ autoShowModal: false }}*/}\n          {/*          >*/}\n          {/*            <MintButton*/}\n          {/*              candyMachine={candyMachine}*/}\n          {/*              isMinting={isUserMinting}*/}\n          {/*              setIsMinting={val => setIsUserMinting(val)}*/}\n          {/*              onMint={onMint}*/}\n          {/*              isActive={*/}\n          {/*                isActive ||*/}\n          {/*                (isPresale && isWhitelistUser && isValidBalance)*/}\n          {/*              }*/}\n          {/*            />*/}\n          {/*          </GatewayProvider>*/}\n          {/*        ) : (*/}\n          {/*          <MintButton*/}\n          {/*            candyMachine={candyMachine}*/}\n          {/*            isMinting={isUserMinting}*/}\n          {/*            setIsMinting={val => setIsUserMinting(val)}*/}\n          {/*            onMint={onMint}*/}\n          {/*            isActive={*/}\n          {/*              isActive ||*/}\n          {/*              (isPresale && isWhitelistUser && isValidBalance)*/}\n          {/*            }*/}\n          {/*          />*/}\n          {/*        )}*/}\n          {/*      </MintContainer>*/}\n          {/*    </>*/}\n          {/*  )}*/}\n          {/*  <Typography*/}\n          {/*    variant=\"caption\"*/}\n          {/*    align=\"center\"*/}\n          {/*    display=\"block\"*/}\n          {/*    style={{ marginTop: 7, color: 'grey' }}*/}\n          {/*  >*/}\n          {/*    Powered by METAPLEX*/}\n          {/*  </Typography>*/}\n          {/*</Paper>*/}\n        </Container>\n      </Container>\n\n      <Container\n        maxWidth=\"xl\"\n        style={{\n          marginTop: '75%',\n          position: 'relative',\n        }}\n      >\n        <Grid justifyContent=\"center\" alignItems=\"center\" container>\n          <Grid item xs={12} md={7}>\n            <Box>\n              <img\n                style={{ borderRadius: '2.5rem', marginTop: '-9rem' }}\n                width=\"100%\"\n                alt=\"Kippo\"\n                src=\"/static/image/FVf98ogVEAAtnQe.jpg\"\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={12} md={7}>\n            <Box sx={{ marginTop: '2rem', textAlign: 'center' }}>\n              <img\n                style={{ borderRadius: '2.5rem', marginTop: '2rem' }}\n                width=\"100%\"\n                alt=\"Kippo\"\n                src=\"/static/image/FVgByXhUUAEB5BF.jpg\"\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={12} md={12}>\n            <Box sx={{ mt: '2rem', textAlign: 'center', pb: '2rem' }}>\n              <Link href=\"http://kippo.com/nft\">\n                <img\n                  style={{ borderRadius: '2.5rem', marginTop: '2rem' }}\n                  width=\"12%\"\n                  alt=\"Kippo\"\n                  src=\"/static/image/wordmark_nft_full@3x.png\"\n                />\n              </Link>\n            </Box>\n          </Grid>\n        </Grid>\n      </Container>\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\nimport { DEFAULT_TIMEOUT } from './connection';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      {/*<ConnectionProvider endpoint={endpoint}>*/}\n      {/*  <WalletProvider wallets={wallets} autoConnect>*/}\n      {/*    <WalletDialogProvider>*/}\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n            />\n      {/*    </WalletDialogProvider>*/}\n      {/*  </WalletProvider>*/}\n      {/*</ConnectionProvider>*/}\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        [],\n        [],\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState,\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log('SetupState: ', setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1,\n        ),\n      ],\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n"],"sourceRoot":""}