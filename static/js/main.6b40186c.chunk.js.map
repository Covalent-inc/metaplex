{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","index.tsx","utils.ts","connection.tsx","candy-machine.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","console","log","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","hideDuration","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","soldOut","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","paperStyle","backgroundColor","Container","maxWidth","position","Grid","container","direction","wrap","xs","paddingTop","marginRight","paddingBottom","Typography","formatNumber","asNumber","marginLeft","align","CANDY_MACHINE_PROGRAM","clusterUrl","handleTransaction","signatures","sig","equals","sendTransaction","error","broadcastTransaction","options","autoShowModal","val","marginTop","collectionTitle","collectionDescription","collectionPhoto","clientId","mintConfig","autoPlay","muted","playsInline","src","type","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","Alert","createTheme","palette","process","e","getCandyMachineId","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","ReactDOM","render","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","SequenceType","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","m","regex","exec","index","lastIndex","length","push","sendTransactions","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","partiallySignedTransactions","filter","t","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","StopOnFailure","Promise","all","txs","result","awaitConfirmation","includesFeePayer","rawTransaction","serialize","skipPreflight","sendRawTransaction","confirmation","getUnixTs","timeout","startTime","sleep","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","queryStatus","confirmations","subId","resolve","reject","onSignature","context","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","mintTxn"],"mappings":"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","file":"static/js/main.6b40186c.chunk.js","sourcesContent":["import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done} style={{fontSize: '12px', padding: '18px'}}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    // @ts-ignore\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 48px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 12px;\n  text-align: center;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Box, Container, Link, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { CrossmintPayButton } from \"@crossmint/client-sdk-react-ui\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div`\n  width: 90%;\n  text-align: 'center';\n`;\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n}\n\n/**\n * We had a hard time uploading all 3501 assets so we\n * decided to upload 500 instead. This offset should give\n * the impression that we have all 3501. We need to\n * upload a new batch after this batch gets minted fully.\n */\nconst remainingOffset = 3000;\n\n// @ts-ignore\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = 'confirmed') => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection,\n          );\n          let active =\n            cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint,\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                'There was a problem fetching whitelist token balance',\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log('There was a problem fetching SPL token balance');\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey),\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            let limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable,\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA,\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Unable to connect to the Solana network`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith('failed to get info about account')\n            ) {\n              setAlertState({\n                open: true,\n                message: `Unable to connect to the Solana network`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: 'error',\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: 'error',\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.rpcHost],\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              'processed',\n            );\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      let soldOut = false;\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          soldOut = true;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n      if (soldOut) {\n        // The sold out alert is shown after a successful transaction. We should show\n        // a success message instead\n        setAlertState({\n          open: true,\n          message: 'Congratulations! Mint succeeded!',\n          severity: 'success',\n          hideDuration: 7000,\n        });\n      } else {\n        setAlertState({\n          open: true,\n          message,\n          severity: 'error',\n        });\n      }\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  let paperStyle = {\n    backgroundColor: '#151A1F',\n    borderRadius: 6,\n    padding: 20\n  }\n  if (wallet.connected) {\n    paperStyle = {\n      backgroundColor: '#151A1F',\n      borderRadius: 6,\n      padding: 0\n    }\n  }\n  return (\n    <Container style={{ padding: 0 }}>\n        <Container\n          maxWidth=\"xs\"\n          style={{\n            width: '368px',\n            padding: 0,\n            position: 'relative',\n          }}\n        >\n          <Paper\n            style={paperStyle}\n          >\n            {!wallet.connected ? (\n              <>\n              <ConnectButton>Connect Wallet</ConnectButton>\n                <CrossmintPayButton\n                  style={{marginTop: '20px', width: '100%'}}\n                  collectionTitle=\"Deeds of Land\"\n                  collectionDescription=\"Kippoverse is a real-time virtual world for dating and making new friends. The Kippo App is a live social metaverse with over 700k users.\"\n                  collectionPhoto=\"https://arweave.net/QLkPX0o_VevqsjPUw2TA5qTJq10NB6CFhR93Okd_8dQ\"\n                  clientId=\"3896b136-0e65-4723-b267-44f3cc7c613c\"\n                  mintConfig={{\"type\":\"candy-machine\"}}\n                />\n              </>\n            ) : (\n              <>\n                {candyMachine && (\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justifyContent=\"center\"\n                    wrap=\"nowrap\"\n                  >\n                    <Grid item xs={4} style={{paddingTop: '14px', marginRight: '14px', paddingBottom: '6px'}}>\n                      <Typography variant=\"body2\" color=\"textSecondary\" style={{fontSize: '12px'}}>\n                        Remaining\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                        style={{\n                          fontSize: '14px',\n                          fontWeight: 'bold',\n                        }}\n                      >\n                        {`${itemsRemaining + remainingOffset} / 5500`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={2} style={{paddingTop: '14px', paddingBottom: '6px'}}>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {isWhitelistUser && discountPrice\n                          ? 'Discount Price'\n                          : 'Price'}\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                        style={{\n                          fontSize: '14px',\n                          fontWeight: 'bold'\n                      }}\n                      >\n                        {isWhitelistUser && discountPrice\n                          ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                          : `◎ ${formatNumber.asNumber(\n                              candyMachine.state.price,\n                            )}`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={4} style={{paddingTop: '14px', marginLeft: '14px', paddingBottom: '6px'}}>\n                      {isActive && endDate && Date.now() < endDate.getTime() ? (\n                        <>\n                          <MintCountdown\n                            key=\"endSettings\"\n                            date={getCountdownDate(candyMachine)}\n                            style={{ justifyContent: 'flex-end', padding: '10px', fontSize: '12px' }}\n                            status=\"COMPLETED\"\n                            onComplete={toggleMintButton}\n                          />\n                          <Typography\n                            variant=\"caption\"\n                            align=\"center\"\n                            display=\"block\"\n                            style={{\n                              fontSize: '14px',\n                              fontWeight: 'bold' }}\n                          >\n                            TO END OF MINT\n                          </Typography>\n                        </>\n                      ) : (\n                        <>\n                          <MintCountdown\n                            key=\"goLive\"\n                            date={getCountdownDate(candyMachine)}\n                            status={\n                              candyMachine?.state?.isSoldOut ||\n                              (endDate && Date.now() > endDate.getTime())\n                                ? 'COMPLETED'\n                                : isPresale\n                                ? 'PRESALE'\n                                : 'LIVE'\n                            }\n                            onComplete={toggleMintButton}\n                          />\n                          {isPresale &&\n                            candyMachine.state.goLiveDate &&\n                            candyMachine.state.goLiveDate.toNumber() >\n                              new Date().getTime() / 1000 && (\n                              <Typography\n                                variant=\"caption\"\n                                align=\"center\"\n                                display=\"block\"\n                                style={{ fontWeight: 'bold', fontSize: '12px' }}\n                              >\n                                UNTIL PUBLIC MINT\n                              </Typography>\n                            )}\n                        </>\n                      )}\n                    </Grid>\n                  </Grid>\n                )}\n                <MintContainer style={{margin: '0 auto'}}>\n                  {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                    <GatewayProvider\n                      wallet={{\n                        publicKey:\n                          wallet.publicKey ||\n                          new PublicKey(CANDY_MACHINE_PROGRAM),\n                        //@ts-ignore\n                        signTransaction: wallet.signTransaction,\n                      }}\n                      gatekeeperNetwork={\n                        candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                      }\n                      clusterUrl={rpcUrl}\n                      cluster={cluster}\n                      handleTransaction={async (transaction: Transaction) => {\n                        setIsUserMinting(true);\n                        const userMustSign = transaction.signatures.find(sig =>\n                          sig.publicKey.equals(wallet.publicKey!),\n                        );\n                        if (userMustSign) {\n                          setAlertState({\n                            open: true,\n                            message: 'Please sign one-time Civic Pass issuance',\n                            severity: 'info',\n                          });\n                          try {\n                            transaction = await wallet.signTransaction!(\n                              transaction,\n                            );\n                          } catch (e) {\n                            setAlertState({\n                              open: true,\n                              message: 'User cancelled signing',\n                              severity: 'error',\n                            });\n                            // setTimeout(() => window.location.reload(), 2000);\n                            setIsUserMinting(false);\n                            throw e;\n                          }\n                        } else {\n                          setAlertState({\n                            open: true,\n                            message: 'Refreshing Civic Pass',\n                            severity: 'info',\n                          });\n                        }\n                        try {\n                          await sendTransaction(\n                            props.connection,\n                            wallet,\n                            transaction,\n                            [],\n                            true,\n                            'confirmed',\n                          );\n                          setAlertState({\n                            open: true,\n                            message: 'Please sign minting',\n                            severity: 'info',\n                          });\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message:\n                              'Solana dropped the transaction, please try again',\n                            severity: 'warning',\n                          });\n                          console.error(e);\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                        await onMint();\n                      }}\n                      broadcastTransaction={false}\n                      options={{ autoShowModal: false }}\n                    >\n                      <MintButton\n                        candyMachine={candyMachine}\n                        isMinting={isUserMinting}\n                        setIsMinting={val => setIsUserMinting(val)}\n                        onMint={onMint}\n                        isActive={\n                          isActive ||\n                          (isPresale && isWhitelistUser && isValidBalance)\n                        }\n                      />\n                      <CrossmintPayButton\n                        style={{marginTop: '20px', width: '100%'}}\n                        collectionTitle=\"Deeds of Land\"\n                        collectionDescription=\"Kippoverse is a real-time virtual world for dating and making new friends. The Kippo App is a live social metaverse with over 700k users.\"\n                        collectionPhoto=\"https://arweave.net/QLkPX0o_VevqsjPUw2TA5qTJq10NB6CFhR93Okd_8dQ\"\n                        clientId=\"3896b136-0e65-4723-b267-44f3cc7c613c\"\n                        mintConfig={{\"type\":\"candy-machine\"}}\n                      />\n                    </GatewayProvider>\n                  ) : (\n                    <>\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                      <CrossmintPayButton\n                        style={{marginTop: '20px', width: '100%'}}\n                        collectionTitle=\"Deeds of Land\"\n                        collectionDescription=\"Kippoverse is a real-time virtual world for dating and making new friends. The Kippo App is a live social metaverse with over 700k users.\"\n                        collectionPhoto=\"https://arweave.net/QLkPX0o_VevqsjPUw2TA5qTJq10NB6CFhR93Okd_8dQ\"\n                        clientId=\"3896b136-0e65-4723-b267-44f3cc7c613c\"\n                        mintConfig={{\"type\":\"candy-machine\"}}\n                      />\n                    </>\n\n                  )}\n                </MintContainer>\n              </>\n            )}\n            <Typography\n              variant=\"caption\"\n              align=\"center\"\n              display=\"block\"\n              style={{ marginTop: 6, color: 'grey', fontSize: '10px', paddingBottom: '5px' }}\n            >\n              Powered by METAPLEX\n            </Typography>\n          </Paper>\n          <div className=\"video w-embed\" style={{marginTop: '20px'}}>\n            <video autoPlay={true} muted={true} playsInline={true} loop={true} width=\"100%\" height=\"auto\" border-radius=\"10px\">\n              <source src=\"video/deed_pre-reveal.mp4\"\n                      type=\"video/mp4\"/>\n            </video>\n          </div>\n        </Container>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\nimport { DEFAULT_TIMEOUT } from './connection';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        [],\n        [],\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState,\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log('SetupState: ', setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1,\n        ),\n      ],\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n"],"sourceRoot":""}